apiVersion: v1
kind: ConfigMap
metadata:
  namespace: default
  name: mariadb-configmap
data:
  
  primary.cnf: |
    [mariadb]
    log-bin                     # enable binary logging
    log-basename=rebs-mariadb   # used to be independent of hostname changes (otherwise is in data/mysql)
  
  replica.cnf: |
    [mariadb]
    log-basename=rebs-mariadb   # used to be independent of hostname changes (otherwise is in data/mysql)
  
  primary.sql: |
    CREATE USER 'rebs'@'%' IDENTIFIED BY 'secret';
    -- GRANT REPLICATION REPLICA ON *.* TO 'rebs'@'%';
    GRANT ALL PRIVILEGES ON *.* TO 'rebs'@'%';
    FLUSH PRIVILEGES;
    CREATE DATABASE rebs;
  
  secondary.sql: |
    # We have to know name of sts (`mariadb`) and
    # service `mariadb-service` in advance as an FQDN.
    # No need to use master_port
    CHANGE MASTER TO
    # MASTER_HOST는 만약 namespace나 service 이름 등을 본인의 환경에 맞춰서 배포하는 경우 MASTER_HOST 값을 변경.
    # mariadb-0.<headless service name>.<namespace name>.svc.cluster.local
    MASTER_HOST='mariadb-0.mariadb-service.default.svc.cluster.local',
    MASTER_USER='rebs',
    MASTER_PASSWORD='secret',
    MASTER_CONNECT_RETRY=10;
---
apiVersion: v1
kind: Service
metadata:
  namespace: default
  name: mariadb-service
  labels:
    app: mariadb
spec:
  ports:
    - port: 3306
      name: mariadb-port
  clusterIP: None
  selector:
    app: mariadb
---
apiVersion: v1
kind: Secret
metadata:
  namespace: default
  name: mariadb-secret
type: Opaque
data:
  mariadb-root-password: c2VjcmV0 # echo -n 'secret' | base64
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  namespace: default
  name: mariadb
spec:
  serviceName: "mariadb-service"
  replicas: 3
  selector:
    matchLabels:
      app: mariadb
  template:
    metadata:
      labels:
        app: mariadb
    spec:
      initContainers:
        - name: init-mariadb
          image: mariadb
          imagePullPolicy: Always
          command:
            - bash
            - "-c"
            - |
              set -ex
              echo 'Starting init-mariadb';
              # Check config map to directory that already exists
              # (but must be used as a volume for main container)
              ls /mnt/config-map
              # Statefulset has sticky identity, number should be last
              [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
              ordinal=${BASH_REMATCH[1]}
              # Copy appropriate conf.d files from config-map to
              # mariadb-config volume (emptyDir) depending on pod number
              if [[ $ordinal -eq 0 ]]; then
                # This file holds SQL for connecting to primary
                cp /mnt/config-map/primary.cnf /etc/mysql/conf.d/server-id.cnf
                # Create the users needed for replication on primary on a volume
                # initdb (emptyDir)
                cp /mnt/config-map/primary.sql /docker-entrypoint-initdb.d
              else
                # This file holds SQL for connecting to secondary
                cp /mnt/config-map/replica.cnf /etc/mysql/conf.d/server-id.cnf
                # On replicas use secondary configuration on initdb volume
                cp /mnt/config-map/secondary.sql /docker-entrypoint-initdb.d
              fi
              # Add an offset to avoid reserved server-id=0 value.
              echo server-id=$((3000 + $ordinal)) >> etc/mysql/conf.d/server-id.cnf
              ls /etc/mysql/conf.d/
              cat /etc/mysql/conf.d/server-id.cnf
          volumeMounts:
            - name: mariadb-config-map
              mountPath: /mnt/config-map
            - name: mariadb-config
              mountPath: /etc/mysql/conf.d/
            - name: initdb
              mountPath: /docker-entrypoint-initdb.d
      restartPolicy: Always
      containers:
        - name: mariadb
          image: mariadb
          ports:
            - containerPort: 3306
              name: mariadb-port
          env:
            # Using Secrets
            - name: MARIADB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mariadb-secret
                  key: mariadb-root-password
            - name: MYSQL_INITDB_SKIP_TZINFO
              value: "1"
          # Mount volume from persistent volume claim
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql/
            - name: mariadb-config
              mountPath: /etc/mysql/conf.d/
            - name: initdb
              mountPath: /docker-entrypoint-initdb.d
            - name: backup
              mountPath: /var/backups/
      volumes:
        - name: mariadb-config-map
          configMap:
            name: mariadb-configmap
            #defaultMode: 0544
        - name: mariadb-config
          emptyDir: {}
        - name: initdb
          emptyDir: {}
        - name: backup
          nfs:
            path: /mnt/nfs/mysql/backups/
            server: 49.247.26.88
  
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        storageClassName: "nfs-client"
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 300M
